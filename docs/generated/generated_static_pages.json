[
  {
    "title": "Apps Overview",
    "description": "Shopify CLI is a command-line interface tool that helps you build Shopify apps. It quickly generates Shopify apps and generates app extensions. You can also use it to automate many common development tasks.\n\nThis documentation explains how to use Shopify CLI for app development. To learn how to use Shopify CLI for other tasks, refer to the following documentation:\n\n  - [Shopify CLI for themes](/docs/api/shopify-cli/v3/theme-cli)\n  - [Shopify CLI for Hydrogen storefronts](/docs/custom-storefronts/hydrogen/cli)\n  ",
    "id": "app-cli",
    "sections": [
      {
        "type": "Generic",
        "anchorLink": "features",
        "title": "Features",
        "sectionContent": "Shopify CLI accelerates your app development process with the following features:\n\n- Creates new apps using app templates\n- Generates app extensions in your app\n- Creates app records in the Partner Dashboard\n- Builds your app and extensions, and creates a tunnel to let you preview your work in a development store\n- Deploys your app extensions\n- Lets you search the Shopify.dev docs"
      },
      {
        "type": "Generic",
        "anchorLink": "requirements",
        "title": "Requirements",
        "sectionContent": "\n- You've installed [Node.js](https://nodejs.org/en/download/) 18.12.0 or higher.\n- You've installed a Node.js package manager: either npm, Yarn 1.x, or pnpm.\n- You've installed Git 2.28.0 or higher.\n- You're using the latest version of Chrome or Firefox.\n      "
      },
      {
        "type": "Generic",
        "anchorLink": "getting-started",
        "title": "Getting started",
        "sectionContent": "When building a Shopify App you can choose between two different workflows:\n- **Shopify CLI installed globally in your system**\n\n  You'll be able to run shopify commands from any directory and the CLI dependencies won't interfere with your app dependencies.\n\n- **Shopify CLI as a project dependency**\n\n  You'll be able to run shopify commands from your project directory and the CLI dependencies will be installed in your project's `node_modules` directory. You'll have more control on which CLI version each of your apps use.\n\nIf you have an existing app that wasn't built using Shopify CLI, you can migrate your app to Shopify CLI for a fully integrated development experience. If you don't want a complete migration, then you can make your app compatible with Shopify CLI to access a limited set of features, such as local app configuration.\n\nRefer to the following tutorials for additional details about creating an app that works with Shopify CLI, or to learn how to work on an existing app that uses Shopify CLI 3.0 or higher:",
        "codeblock": {
          "title": "",
          "tabs": [
            {
              "title": "Global CLI",
              "code": "shopify create-app --name \"My app\"\n",
              "language": "bash"
            },
            {
              "title": "CLI as a project dependency",
              "code": "npm init @shopify/app@latest --name \"My app\"\n",
              "language": "bash"
            }
          ]
        }
      },
      {
        "type": "Generic",
        "anchorLink": "commands",
        "title": "Command reference",
        "sectionContent": "Refer to the [Shopify CLI app command reference](/docs/api/shopify-cli/commands) to explore the commands available to build apps with Shopify CLI.      "
      },
      {
        "type": "Resource",
        "anchorLink": "resources",
        "title": "Resources",
        "resources": [
          {
            "name": "Create an app",
            "subtitle": "Learn how to set up your app development environment and start building",
            "url": "/docs/themes/getting-started/create",
            "type": "component"
          },
          {
            "name": "Build an app",
            "subtitle": "After creating your app, follow this in-depth tutorial to learn how to add features to your app using Shopify templates, tools and libraries",
            "url": "/docs/apps/getting-started/build-qr-code-app",
            "type": "tutorial"
          },
          {
            "name": "Work on an existing app",
            "subtitle": "Learn how to set up your development environment to collaborate on an app with others",
            "url": "/docs/apps/getting-started/build-qr-code-app",
            "type": "tutorial"
          }
        ]
      }
    ]
  },
  {
    "title": "CI/CD",
    "description": "Shopify CLI offers CI/CD support for apps and themes.\n- **Apps**: You can deploy any app extensions that you generated using Shopify CLI in a CI/CD pipeline.\n- **Themes**: If you have a theme that you want to work with programmatically, then you can integrate Shopify CLI into your CI/CD pipeline to perform actions like pushing, pulling, and publishing a theme.\n  ",
    "id": "ci-cd",
    "sections": [
      {
        "type": "Generic",
        "anchorLink": "ci-app",
        "title": "Apps",
        "sectionContent": "\n&nbsp;\n### Step 1: Generate variables for deployment\n\nTo target the app that you want to deploy to, you need to gather your app's client ID.\n\n1. Navigate to your app directory.\n2. Run `shopify app deploy`\n\nAn env file is generated at the root of your project. It contains the client ID (API key) for your app and the ID of each of the extensions in your app.\n\n&nbsp;\n### Step 2: Generate a CLI authentication token\nYou can create a new CLI authentication token through the Partner Dashboard.\n\nTokens are managed at the Partner organization level. You can have only two CLI authentication tokens for your Partner organization. If you want to create more than two authentication tokens, then you need to delete an existing authentication token.\n\n#### Generate a CLI authentication token in the Partner Dashboard\n- From your Partner Dashboard, navigate to Settings > CLI token, and then click Manage tokens.\n- From the Token expiration drop-down list, select an expiration for the token.\n- Click Generate token.\n- In the Tokens section, click the Copy button to copy the access token to your clipboard.\n  This token value will be passed as a parameter in your Shopify CLI automation.\n\nFor security reasons, the token is only visible immediately after it's created. If you lose your token, then you need to delete your existing token and then generate a new token.\n\n&nbsp;\n### Step 3: Integrate Shopify CLI into your pipeline\nAfter you retrieve your deployment variables and CLI authentication token, you can integrate Shopify CLI into your continuous deployment pipeline using your CI/CD provider.\n\nThe CD pipeline step should install Shopify CLI and all of its dependencies.\n\nTo push to Shopify programmatically using your CD pipeline step, include the following:\n\n- An environment variable that contains the authentication token that you generated in the Partner Dashboard.\n- The client ID for your app.\n- A step that installs the Shopify CLI (either globally or as a project dependency).\n- Steps that install the other dependencies for your project.\n- A step that runs the CLI deploy command with the force flag set.\n\nWhere possible, you should protect the authentication token and client ID values by masking them or storing them as secrets.\n",
        "codeblock": {
          "title": "CI/CD Examples",
          "tabs": [
            {
              "title": "Github Actions",
              "code": "# .github/workflows/deploy-extensions.yml\nname: Deploy app\non:\n  push:\n    branches:\n      - main\njobs:\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: 'npm'\n      - name: Install Shopify CLI\n        run: npm install -g @shopify/cli\n      - name: Deploy\n        env:\n          # Token from the Partner Dashboard\n          SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}\n          COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\n          # .env content after a deploy\n          SHOPIFY_API_KEY: xxxx\n        run: shopify app deploy -f --source-control-url \"$COMMIT_URL\"\n",
              "language": "yaml"
            },
            {
              "title": "CircleCI",
              "code": "# .circleci/config.yml\nversion: 2.1\norbs:\n  node: circleci/node@5.0.2\njobs:\n  deploy:\n    docker:\n      - image: cimg/node:20.5.0\n    environment:\n      COMMIT_URL: &lt;&lt; pipeline.project.git_url &gt;&gt;/commit/&lt;&lt;pipeline.git.revision&gt;&gt;\n    steps:\n      - checkout\n      - node/install-packages:\n          with-cache: true\n      - run:\n          name: Install Shopify CLI\n          command: npm install -g @shopify/cli\n      - run:\n          name: Deploy\n          environment:\n            # SHOPIFY_CLI_PARTNERS_TOKEN should be present as a secret\n            # .env content after a deploy\n            SHOPIFY_API_KEY: xxxx\n          command: |\n            shopify app deploy -f --source-control-url $COMMIT_URL\nworkflows:\n  version: 2\n  deploy:\n    jobs:\n      - deploy:\n          filters:\n            branches:\n              only: main\n",
              "language": "yaml"
            }
          ]
        }
      },
      {
        "type": "Generic",
        "anchorLink": "ci-theme",
        "title": "Themes",
        "sectionContent": "\n&nbsp;\n### Step 1: Get a Theme Access password for the store\n\nFor each store that you want to interact with programmatically using Shopify CLI, you need to get a Theme Access password. These are generated using the Theme Access app.\n\nTo learn about the requirements for installing and using the Theme Access app, and instructions on how to generate a new password, refer to Manage theme access.\n\n&nbsp;\n### Step 2: Generate a CLI authentication token\n\nAfter you get a Theme Access password for the store, you can integrate Shopify CLI into your continuous deployment pipeline using your CI/CD provider.\n\nThe CD pipeline step should install Shopify CLI and all of its dependencies.\n\nTo run Shopify CLI theme commands programmatically using your CD pipeline step, include the following:\n\n- Environment variables:\n\n  | Command   |      Required?      |      Value      |\n  |----------|:-------------:|:-------------|\n  | `SHOPIFY_FLAG_STORE` |  \tYes | The store that you want to interact with |\n  | `SHOPIFY_CLI_THEME_TOKEN` |  \tYes | The Theme Access password that you generated or were given by a merchant. **We recommend to store this as a secret**. |\n  | `SHOPIFY_CLI_TTY` |  \tNo | Pass this variable with a value of `0` to turn off interactive prompts. You might want to use this variable if your Shopify CLI pipeline step is timing out. |\n\n- A step that sets up Ruby and bundler.\n- A step that sets up Node.js.\n- A step that installs Shopify CLI globally.\n- A step that runs the CLI command that you want to execute.\n",
        "codeblock": {
          "title": "",
          "tabs": [
            {
              "title": "Example (Github Actions)",
              "code": "# .github/workflows/deploy-theme.yml\nname: Theme deploy\non: [push]\njobs:\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 3.1\n          bundler: 'latest'\n      - name: Install Shopify CLI\n        run: npm install -g @shopify/cli\n      - name: Deploy\n        env:\n          # Store URL, like your-store.myshopify.com\n          SHOPIFY_FLAG_STORE: '${{ secrets.SHOPIFY_STORE }}'\n          # Password generated from Theme Access app\n          SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}\n          SHOPIFY_CLI_TTY: 0\n        run: shopify theme push --path ./path/to/your/theme --theme your-theme-name-or-id\n",
              "language": "yaml"
            }
          ]
        }
      }
    ]
  },
  {
    "title": "Shopify CLI",
    "description": "Shopify CLI is a command-line interface tool that helps you build Shopify apps and themes. It quickly generates Shopify apps, themes, and custom storefronts. You can also use it to automate many common development tasks.",
    "id": "Shopify CLI",
    "image": "/assets/landing-pages/templated-apis/web-pixels-api/landing-page.png",
    "darkImage": "/assets/landing-pages/templated-apis/web-pixels-api/landing-page.png",
    "sections": [
      {
        "type": "Generic",
        "anchorLink": "requirements",
        "title": "Requirements",
        "sectionContent": "- Node.js version 18.12.0 or higher\n- Ruby version 2.7.2 or higher (Only for theme commands)\n- Git version 2.28.0 or higher"
      },
      {
        "type": "Generic",
        "anchorLink": "installation",
        "title": "Installation",
        "sectionContent": "This installs Shopify CLI globally, so you can run shopify commands from any directory. Find out more about the available commands by running `shopify` in your terminal.\n\nFor app development you can also install the CLI locally to your project, find out more about that [Here](/docs/apps/getting-started/installation).",
        "codeblock": {
          "title": "",
          "tabs": [
            {
              "title": "npm",
              "code": "npm install -g @shopify/cli\n",
              "language": "bash"
            },
            {
              "title": "yarn",
              "code": "yarn add global @shopify/cli\n",
              "language": "bash"
            },
            {
              "title": "pnpm",
              "code": "pnpm install -g @shopify/cli\n",
              "language": "bash"
            },
            {
              "title": "homebrew",
              "code": "# Only for macOS\nbrew tap shopify/shopify\nbrew install shopify-cli\n",
              "language": "bash"
            }
          ]
        }
      },
      {
        "type": "Generic",
        "anchorLink": "Commands",
        "title": "Commands",
        "sectionContent": "\nShopify CLI groups commands into topics and this is the syntax to run them: `shopify [topic] [command]`.\nCheck out the [Commands](/docs/api/shopify-cli/commands) section to see the list of commands available for each topic.\n\nOr run the `help` command to get this information right in your terminal\n",
        "codeblock": {
          "title": "terminal",
          "tabs": [
            {
              "code": "shopify help\n",
              "language": "bash"
            }
          ]
        }
      },
      {
        "type": "Generic",
        "anchorLink": "upgrade",
        "sectionContent": "We recommend to always use the latest version of the CLI if possible, run `version` to check the current version and if there are any updates available. Then run the same install command to upgrade to the latest CLI version.",
        "title": "Upgrade your CLI",
        "codeblock": {
          "title": "terminal",
          "tabs": [
            {
              "code": "shopify version\n&gt; Current Shopify CLI version: 3.50.0\n&gt; 💡 Version 3.51.0 available!\n\nnpm install @shopify/cli -g\n",
              "language": "bash"
            }
          ]
        }
      },
      {
        "type": "Generic",
        "anchorLink": "reporting",
        "title": "Usage reporting",
        "sectionContent": "Anonymous usage statistics are collected by default. To opt out, you can use the environment variable `SHOPIFY_CLI_NO_ANALYTICS=1`."
      },
      {
        "type": "Generic",
        "anchorLink": "contributing",
        "title": "Contributing to Shopify CLI",
        "sectionContent": "Shopify CLI is open source. [Learn how to contribute](https://github.com/Shopify/cli/wiki/Contributors:-Introduction) to our GitHub repository."
      },
      {
        "type": "Generic",
        "anchorLink": "help",
        "title": "Where to get help",
        "sectionContent": "\n- [Open a GitHub issue](https://github.com/shopify/cli/issues) - To report bugs or request new features, open an issue in the Shopify CLI repository.\n- [Shopify Community Forums](https://community.shopify.com/?shpxid=f84767ac-02DB-40B4-E6CB-AAF9AB7659DA) - Visit our forums to connect with the community and learn more about Shopify CLI development.\n"
      },
      {
        "type": "Resource",
        "anchorLink": "fakeAnchorLink",
        "title": "Resources",
        "resources": [
          {
            "name": "Start building a theme",
            "subtitle": "Learn how to set up your theme development environment and create a new theme",
            "url": "/docs/themes/getting-started/create",
            "type": "component"
          },
          {
            "name": "Create an app",
            "subtitle": "Learn how to set up your app development environment and start building",
            "url": "/docs/apps/getting-started/create",
            "type": "tutorial"
          }
        ]
      }
    ]
  },
  {
    "title": "Themes Overview",
    "description": "This documentation explains how to use Shopify CLI for theme development. To learn how to use Shopify CLI for other tasks, refer to the following documentation:\n\n  - [Shopify CLI for apps](/docs/api/shopify-cli/v3/app-cli)\n  - [Shopify CLI for Hydrogen storefronts](/docs/custom-storefronts/hydrogen/cli)\n\n> Tip: You can use Shopify CLI together with the [Shopify GitHub integration](/docs/themes/tools/github) to add version control to themes that you're developing.\n  ",
    "id": "theme-cli",
    "sections": [
      {
        "type": "Generic",
        "anchorLink": "features",
        "title": "Features",
        "sectionContent": "Shopify CLI accelerates your theme development process with the following features:\n\n- Safely preview, test, and share changes to themes using development themes\n- Hot reload CSS and section changes, or automatically refresh a page on file change, when previewing a theme\n- Initialize a new theme using Dawn as a starting point\n- Push and publish themes from the command line\n- Work on multiple themes using environments\n- Run Theme Check on your theme"
      },
      {
        "type": "Generic",
        "anchorLink": "development-themes",
        "title": "Development themes",
        "sectionContent": "Development themes are temporary, hidden themes that are connected to the Shopify store that you're using for development. When you connect your theme to a store as a development theme, you can use that store's data for local testing.\n\nYou can create a development theme using the `shopify theme dev` command.\n\nYou can use development themes on a Shopify store or a [development store](/docs/themes/tools/development-stores). Development themes don't count toward your theme limit, and are deleted from the store after seven days of inactivity.\n\nYour development theme is deleted when you run `shopify auth logout`. If you want a preview link for the theme that can be accessed after you log out, then you should push your development theme to an unpublished theme on your store.\n\nYour development theme can be used to perform the following tasks:\n\n- View changes in real time to a theme that you're developing locally\n- Customize and interact with the theme using the Shopify admin [theme editor](/docs/themes/tools/online-editor)\n- Share a password-protected preview of the theme with other developers"
      },
      {
        "type": "Generic",
        "anchorLink": "environments",
        "title": "Environments",
        "sectionContent": "Many command configurations, such as the theme and store to be used with the command, are passed using flags. To avoid passing multiple flags with each command, and to easily switch projects or contexts, you can use environments. Environments are sets of command configurations that can be referenced by name using a single --environment flag.\n\nYou might want to use environments in the following cases:\n\n- You need to switch between development stores frequently.\n- You access multiple stores using Theme Access passwords.\n- You want to deploy your project to development, staging, and production instances of your theme.\n\n[Learn how to configure and use environments](/docs/themes/tools/cli/environments)"
      },
      {
        "type": "Generic",
        "anchorLink": "getting-started",
        "title": "Getting started",
        "sectionContent": "Refer to the following tutorials for details about creating or working on a Shopify theme using Shopify CLI:",
        "sectionCard": [
          {
            "name": "Start building a theme",
            "subtitle": "Learn how to set up your theme development environment and create a new theme",
            "url": "/docs/themes/getting-started/create",
            "type": "cheatsheet"
          },
          {
            "name": "Customize an existing theme",
            "subtitle": "Learn how to set up your development environment to work on a theme in a Shopify store",
            "url": "/docs/themes/getting-started/customize",
            "type": "tutorial"
          }
        ]
      },
      {
        "type": "Generic",
        "anchorLink": "commands",
        "title": "Command reference",
        "sectionContent": "Refer to the [Shopify CLI theme command reference](/docs/api/shopify-cli/commands) to explore the commands available to build themes with Shopify CLI."
      },
      {
        "type": "Generic",
        "anchorLink": "authentication",
        "title": "Authentication",
        "sectionContent": "As a theme developer, you might want to use a Shopify store to test your theme, or to share your theme with stakeholders. You also might need to work on multiple stores, or use a different set of credentials to authenticate with a particular store. Learn about the authentication methods that you can use to work on stores using Shopify CLI, and how to switch between accounts and stores.\n\nYou can use the following authentication methods to work on a theme in a Shopify store using Shopify CLI:\n\n- Log in with a Shopify account\n- Provide a Theme Access password\n- Provide a custom app access token\n\n### Log in with a Shopify account\nYou can use the following types of Shopify accounts to access the store you want to work on:\n\n- A collaborator account with the Manage themes permission\n- A staff account with the Themes permission\n- The store owner account\nTo authenticate with a Shopify account, run a command that requires store access. You'll be prompted to log in.\n\n> Caution: To use a development store or Plus sandbox store with Shopify CLI, you need to be the store owner, or have a staff account on the store. Staff accounts are created automatically the first time you access a development store with your Partner staff account through the Partner Dashboard.\n\n#### Switching between accounts\nIf you need to switch between accounts, then log out of the current account using the `shopify auth logout` command.\n\nThe next time you enter a command that requires authentication, you'll be prompted to log in, and can enter a new set of credentials.\n\n### Theme Access password\nYou can use a Theme Access password to authenticate with the store that you want to work on. Theme Access passwords are generated for a store using the Theme Access app.\n\nTo use a Theme Access password, pass the `--password` flag with each command that you want to run against the store. If you run a command without the `--password` flag, then Shopify CLI attempts to use your Shopify account credentials to run the command.\n\n### Custom app access token\nYou can use a custom app access token to authenticate with the store that you want to work on.\n\nTo authenticate using an access token, pass the `--password` flag with each command that you want to run against the store. If you run a command without the `--password` flag, then Shopify CLI attempts to use your Shopify account credentials to run the command.\n\nYour custom app needs to have the `read_themes` and `write_themes` API access scopes. To enable hot reloading, you also need to add the unauthenticated_read_content access scope for Storefront API integration, and pass the tokens as environment variables instead of using the `--password` flag."
      },
      {
        "type": "Generic",
        "anchorLink": "connecting-store",
        "title": "Connecting to a store",
        "sectionContent": "The first time you enter a command that requires you to interact with a Shopify store, pass the `--store` flag with the command and specify the store that you want to interact with\n\nThe store that you specify is used for future commands until a new store is specified.\n\nIf you want to change the store that you're interacting with, pass the `--store flag` with your command, specifying the new store that you want to interact with.\n\nTo check which store you're using, run `shopify theme info`",
        "codeblock": {
          "title": "",
          "tabs": [
            {
              "title": "Terminal",
              "code": "shopify theme dev --store my-store\n\nshopify theme info\n\n# Output\nTHEME CONFIGURATION\n-----------------------\nStore   my-store.myshopify.com\n...\n",
              "language": "bash"
            }
          ]
        }
      },
      {
        "type": "Generic",
        "anchorLink": "directory",
        "title": "Directory structure",
        "sectionContent": "You can run certain theme commands, such as `shopify theme dev`, only if the directory you're using matches the default Shopify theme directory structure. This structure represents a buildless theme, or a theme that has already gone through any necessary file transformations. If you use build tools to generate theme files, then you might need to run commands from the directory where the generated files are stored.:",
        "codeblock": {
          "title": "",
          "tabs": [
            {
              "title": "Shopify theme directory structure",
              "code": "└── project\n    ├── assets\n    ├── config\n    ├── layout\n    ├── locales\n    ├── sections\n    ├── snippets\n    └── templates\n        └── customers\n",
              "language": "bash"
            }
          ]
        }
      }
    ]
  }
]