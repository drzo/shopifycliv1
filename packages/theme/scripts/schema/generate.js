import {jsonSchemaToZodDereffed} from 'json-schema-to-zod'
import {get} from 'https'
import {writeFile} from 'fs'
import {resolve} from 'path'

function remoteSchemaPath(schemaVersion) {
  const repository = 'Shopify/theme-liquid-docs'
  const schemaPath = `schemas/update/update_extension_schema_v${schemaVersion}.json`

  return `https://raw.githubusercontent.com/${repository}/main/${schemaPath}`
}

function localSchemaPath(schemaVersion) {
  return resolve(`./src/cli/services/update/schemas/update_extension_schema_v${schemaVersion}.ts`)
}

function downloadSchema(schemaUrl) {
  return new Promise((resolve, reject) => {
    get(schemaUrl, (resp) => {
      let data = ''
      resp.on('data', (chunk) => (data += chunk))
      resp.on('end', () => resolve(data))
    }).on('error', (err) => {
      console.error(`Schema could not be download from ${url}: ${err.message}`)
    })
  })
}

function schemaFile(schemaUrl, schemaObject) {
  return `
    /**
     * IMPORTANT: Do not modify this file.
     *
     * This file is generated by the \`pnpm run schema:generate\` command and should
     * not be modified.
     *
     * Any changes to the schemas for \`update_extension\` files require the creation
     * of a new schema file at \`https://github.com/Shopify/theme-liquid-docs\`.
     *
     * This is necessary because Shopify must support legacy \`update_extension.json\`
     * scripts. Once a new schema is published, it must be supported forever without
     * breaking backward compatibility.
     */
    import {zod as z} from '@shopify/cli-kit/node/schema'

    export const schemaUrlV1 = "${schemaUrl}"

    export ${schemaObject}
  `
}

async function updateSchemaFile(schemaVersion) {
  const remotePath = remoteSchemaPath(schemaVersion)
  const localPath = localSchemaPath(schemaVersion)

  const schema = await downloadSchema(remotePath)
  const schemaObj = JSON.parse(schema)
  const zodSchema = await jsonSchemaToZodDereffed(schemaObj, `schemaV${schemaVersion}`, false, true)

  writeFile(localPath, schemaFile(remotePath, zodSchema), (err) => {
    if (err) throw err
  })
}

const SUPPORTED_SCHEMAS = [1]

;(async () => {
  SUPPORTED_SCHEMAS.forEach(updateSchemaFile)
})()
